<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<layersConfig>
    <lombokSettings active="false">
    </lombokSettings>
    <layers>
        <layer name="API">
            <packageName>api</packageName>
            <namingSuffix>Api</namingSuffix>
            <type>concrete</type>
        </layer>
        <layer name="DAO">
            <packageName>dao</packageName>
            <namingSuffix>Dao</namingSuffix>
            <type>interface</type>
        </layer>
        <layer name="SERVICE_IMPL">
            <packageName>service.impl</packageName>
            <namingSuffix>ServiceImpl</namingSuffix>
            <type>concrete</type>
            <methods>
                <method type="findAll">
                    <methodSig>Page&lt;${responseClazz}&gt; findAll(Predicate predicate, Pageable pageable)</methodSig>
                    <methodBody>
                        Page&lt;${domainClazz}&gt; page = ${dao}.findAll(predicate, pageable);
                        return new PageImpl&lt;&gt;(
                        page.stream().map(${responseClazz}::new).collect(Collectors.toList()), pageable,
                        page.getTotalElements())
                    </methodBody>
                </method>
                <method type="findById">
                    <methodSig>${responseClazz} findById(Long id)</methodSig>
                    <methodBody>${findByIdInject}
                        return new ${responseClazz}(${domain})
                    </methodBody>
                </method>
                <method type="save">
                    <methodSig>${responseClazz} save(${requestClazz} ${request})</methodSig>
                    <methodBody>${findByIdRelation}
                        ${builderInject}
                        ${dao}.save(${domain})
                        return new ${responseClazz}(${domain})
                    </methodBody>
                </method>
                <method type="update">
                    <methodSig>${responseClazz} update(${requestClazz} ${request})</methodSig>
                    <methodBody>Optional&lt;${domainClazz}&gt; ${optional} = ${dao}.findById(id);
                        if (${optional}.isEmpty()) {
                        throw new ResourceNotFoundException("${domainClazz} not found!");
                        }
                        ${domainClazz} ${domain} = ${optional}.get();
                    </methodBody>
                </method>
                <method type="delete">
                    <methodSig>Boolean delete(Long id)</methodSig>
                    <methodBody>${findByIdInject}
                        ${dao}.delete(${domain})
                    </methodBody>
                </method>
            </methods>
        </layer>
        <layer name="SERVICE">
            <packageName>service</packageName>
            <namingSuffix>Service</namingSuffix>
            <type>interface</type>
            <methods>
                <method type="findAll">
                    <methodSig>public Page&lt;${responseClazz}&gt; findAll(Predicate predicate, Pageable pageable);
                    </methodSig>
                </method>
                <method type="findById">
                    <methodSig>public ${responseClazz} findById(Long id);</methodSig>
                </method>
                <method type="save">
                    <methodSig>public ${responseClazz} save(${requestClazz} ${request});</methodSig>
                </method>
                <method type="update">
                    <methodSig>public ${responseClazz} update(${requestClazz} ${request});</methodSig>
                </method>
                <method type="delete">
                    <methodSig>public Boolean delete(Long id);</methodSig>
                </method>
            </methods>
        </layer>
        <layer name="RESPONSE_DTO">
            <packageName>domain.dto.response</packageName>
            <namingSuffix>ResponseDto</namingSuffix>
            <type>concrete</type>
        </layer>
        <layer name="REQUEST_DTO">
            <packageName>domain.dto.request</packageName>
            <namingSuffix>RequestDto</namingSuffix>
            <type>concrete</type>
        </layer>
        <layer name="DOMAIN">
            <packageName>domain</packageName>
            <namingSuffix></namingSuffix>
            <type>concrete</type>
        </layer>
    </layers>
</layersConfig>