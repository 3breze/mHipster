<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<layersConfig>
    <lombokSettings active="false">
    </lombokSettings>
    <layers>
        <layer name="API">
            <packageName>api</packageName>
            <namingSuffix>Api</namingSuffix>
            <type>concrete</type>
            <methods>
                <method type="findAll">
                    <methodSignature returns="Page&lt;responseClass&gt;">
                        <parameters>
                            <parameter type="Predicate">predicate</parameter>
                            <parameter type="Pageable">pageable</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${serviceInst}.findAll(predicate, pageable)</methodBody>
                </method>
                <method type="findById">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return new ${serviceInst}.findById(id)</methodBody>
                </method>
                <method type="save">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${serviceInst}.save(${requestInst})</methodBody>
                </method>
                <method type="update">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${serviceInst}.update(${requestInst})</methodBody>
                </method>
                <method type="delete">
                    <methodSignature returns="void">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${serviceInst}.delete(id)</methodBody>
                </method>
            </methods>
        </layer>
        <layer name="DAO">
            <packageName>dao</packageName>
            <namingSuffix>Dao</namingSuffix>
            <type>interface</type>
            <methods>
            <method type="findByIdIn">
                <methodSignature returns="List&lt;domainClass&gt;">
                    <parameters>
                        <parameter type="List&lt;Long&gt;">ids</parameter>
                    </parameters>
                </methodSignature>
                <methodBody></methodBody>
            </method></methods>
        </layer>
        <layer name="SERVICE_IMPL">
            <packageName>service.impl</packageName>
            <namingSuffix>ServiceImpl</namingSuffix>
            <type>concrete</type>
            <methods>
                <method type="findAll">
                    <methodSignature returns="Page&lt;responseClass&gt;">
                        <parameters>
                            <parameter type="Predicate">predicate</parameter>
                            <parameter type="Pageable">pageable</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>Page&lt;${domainClass}&gt; page = ${daoInst}.findAll(predicate, pageable);&#xA;return ${pageResInject}</methodBody>
                </method>
                <method type="findById">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${domainClass} ${domainInst} = findOne(id);&#xA;return ${responseClass}(${domainInst})</methodBody>
                </method>
                <method type="findOne">
                    <methodSignature returns="domainClass">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${findByIdInject}return ${domainInst}</methodBody>
                </method>
                <method type="findByIds">
                    <methodSignature returns="List&lt;domainClass&gt;">
                        <parameters>
                            <parameter type="List&lt;Long&gt;">ids</parameter>
                        </parameters>
                    </methodSignature>return contents.stream().collect(Collectors.toMap(Content::getId, this::prepareResponse));
                    <methodBody>List&lt;${domainClass}&gt; ${domainInst}List = ${daoInst}.findByIdIn(ids);&#xA;return ${domainInst}List</methodBody>
                </method>
                <method type="save">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${findByIdRelation}${builderInject}${daoInst}.save(${domainInst});&#xA;return new ${responseClass}(${domainInst})</methodBody>
                </method>
                <method type="update">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${findByIdRelation}${findByIdInject}${setterCalls}${daoInst}.save(${domainInst});&#xA;return new ${responseClass}(${domainInst})</methodBody>
                </method>
                <method type="delete">
                    <methodSignature returns="void">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${findByIdInject}${daoInst}.delete(${domainInst})</methodBody>
                </method>
            </methods>
        </layer>
        <layer name="SERVICE">
            <packageName>service</packageName>
            <namingSuffix>Service</namingSuffix>
            <type>interface</type>
            <methods>
                <method type="findAll">
                    <methodSignature returns="Page&lt;responseClass&gt;">
                        <parameters>
                            <parameter type="Predicate">predicate</parameter>
                            <parameter type="Pageable">pageable</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="findById">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="Long">Id</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="save">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="update">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="delete">
                    <methodSignature returns="void">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                </method>
            </methods>
        </layer>
        <layer name="RESPONSE_DTO">
            <packageName>domain.dto.response</packageName>
            <namingSuffix>ResponseDto</namingSuffix>
            <type>concrete</type>
        </layer>
        <layer name="REQUEST_DTO">
            <packageName>domain.dto.request</packageName>
            <namingSuffix>RequestDto</namingSuffix>
            <type>concrete</type>
        </layer>
    </layers>
</layersConfig>