<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<layersConfig>
    <layers>
        <layer name="API">
            <packageName>api</packageName>
            <namingSuffix>Api</namingSuffix>
            <type>concrete</type>
            <methods>
                <method type="findAll">
                    <methodSignature returns="Page&lt;responseClass&gt;">
                        <parameters>
                            <parameter type="Predicate">predicate</parameter>
                            <parameter type="Pageable">pageable</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${serviceInst}.findAll(predicate, pageable)</methodBody>
                </method>
                <method type="findById">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${serviceInst}.findById(id)</methodBody>
                </method>
                <method type="save">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${serviceInst}.save(${requestInst})</methodBody>
                </method>
                <method type="update">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${serviceInst}.update(${requestInst})</methodBody>
                </method>
                <method type="delete">
                    <methodSignature returns="void">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${serviceInst}.delete(id)</methodBody>
                </method>
            </methods>
        </layer>
        <layer name="DAO">
            <packageName>dao</packageName>
            <namingSuffix>Dao</namingSuffix>
            <type>interface</type>
            <methods>
            <method type="findByIdIn">
                <methodSignature returns="List&lt;domainClass&gt;">
                    <parameters>
                        <parameter type="List&lt;Long&gt;">ids</parameter>
                    </parameters>
                </methodSignature>
                <methodBody></methodBody>
            </method></methods>
        </layer>
        <layer name="SERVICE_IMPL">
            <packageName>service.impl</packageName>
            <namingSuffix>ServiceImpl</namingSuffix>
            <type>concrete</type>
            <methods>
                <method type="findAll">
                    <methodSignature returns="Page&lt;responseClass&gt;">
                        <parameters>
                            <parameter type="Predicate">predicate</parameter>
                            <parameter type="Pageable">pageable</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${pageResInject}</methodBody>
                </method>
                <method type="findById">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return new ${responseClass}(findOne(id))</methodBody>
                </method>
                <method type="findOne">
                    <methodSignature returns="domainClass">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${findByIdInject}</methodBody>
                </method>
                <method type="findByIds">
                    <methodSignature returns="List&lt;domainClass&gt;">
                        <parameters>
                            <parameter type="List&lt;Long&gt;">ids</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>return ${daoInst}.findByIdIn(ids)</methodBody>
                </method>
                <method type="save">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${builderInject}${findByIdRelation}${daoInst}.save(${domainInst});&#xA;return new ${responseClass}(${domainInst})</methodBody>
                </method>
                <method type="update">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst
                            </parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${domainClass} ${domainInst} = findOne(${requestInst}.getId())&#xA;${findByIdRelation}${setterCalls}${daoInst}.save(${domainInst});&#xA;return new ${responseClass}(${domainInst})</methodBody>
                </method>
                <method type="delete">
                    <methodSignature returns="void">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                    <methodBody>${domainClass} ${domainInst} = findOne(id);&#xA;${daoInst}.delete(${domainInst})</methodBody>
                </method>
            </methods>
        </layer>
        <layer name="SERVICE">
            <packageName>service</packageName>
            <namingSuffix>Service</namingSuffix>
            <type>interface</type>
            <methods>
                <method type="findAll">
                    <methodSignature returns="Page&lt;responseClass&gt;">
                        <parameters>
                            <parameter type="Predicate">predicate</parameter>
                            <parameter type="Pageable">pageable</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="findById">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="Long">Id</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="save">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="update">
                    <methodSignature returns="responseClass">
                        <parameters>
                            <parameter type="requestClass">requestInst</parameter>
                        </parameters>
                    </methodSignature>
                </method>
                <method type="delete">
                    <methodSignature returns="void">
                        <parameters>
                            <parameter type="Long">id</parameter>
                        </parameters>
                    </methodSignature>
                </method>
            </methods>
        </layer>
        <layer name="RESPONSE_DTO">
            <packageName>domain.dto.response</packageName>
            <namingSuffix>ResponseDto</namingSuffix>
            <type>concrete</type>
        </layer>
        <layer name="REQUEST_DTO">
            <packageName>domain.dto.request</packageName>
            <namingSuffix>RequestDto</namingSuffix>
            <type>concrete</type>
        </layer>
    </layers>
    <helperMethods>
        <helperMethod name="buildFindManyRelationCodeBlock">
            <codeBlockStatements>
                <codeBlockStatement>
                    <statementBody>$T&lt;$T&gt; $LList = $L.findByIds($L.get$LListIds())</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>type</entityNameKey>
                            <classLayer>List</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>serviceClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>requestClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
                <codeBlockStatement>
                    <statementBody>$L.set$LList($LList)</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
            </codeBlockStatements>
        </helperMethod>
        <helperMethod name="buildFindOneRelationCodeBlock">
            <codeBlockStatements>
                <codeBlockStatement>
                    <statementBody>if ($T.ofNullable($L.get$LId()).isPresent())</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>optional</entityNameKey>
                            <classLayer>Optional</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>requestClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
                <codeBlockStatement>
                    <statementBody>$T $L = $L.findOne($L.get$LId())</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>serviceClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>requestClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
                <codeBlockStatement>
                    <statementBody>$L.set$L($L)</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
            </codeBlockStatements>
        </helperMethod>
        <helperMethod name="buildLombokBuilder">
            <codeBlockStatements>
                <codeBlockStatement>
                    <statementBody>$T $L = $T.builder()$L.build()</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>stringbuilder</entityNameKey>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
            </codeBlockStatements>
        </helperMethod>
        <helperMethod name="buildPageResponse">
            <codeBlockStatements>
                <codeBlockStatement>
                    <statementBody>Page&lt;$T&gt; page = $L.findAll(predicate, pageable)</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>domainClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>daoClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
                <codeBlockStatement>
                    <statementBody>return new $T&lt;&gt;(page.stream().map($T::new).collect($T.toList()), pageable, page.getTotalElements())</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>pageImpl</entityNameKey>
                            <classLayer>PageImpl</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>responseClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>collectors</entityNameKey>
                            <classLayer>Collectors</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
            </codeBlockStatements>
        </helperMethod>
        <helperMethod name="buildFindByIdCodeBlock">
            <codeBlockStatements>
                <codeBlockStatement>
                    <statementBody>return $L.findById(id).orElseThrow(() -> new $T("$T", "id", id))</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>entity</entityNameKey>
                            <classLayer>daoClass</classLayer>
                            <isClazz>false</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>exception</entityNameKey>
                            <classLayer>ResourceNotFoundException</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>exception</entityNameKey>
                            <classLayer>ResourceNotFoundException</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
            </codeBlockStatements>
        </helperMethod>
        <helperMethod name="buildResponseConstructor">
            <codeBlockStatements>
                <codeBlockStatement>
                    <statementBody>this.$L = $L.get$L().stream().map($T::new).collect($T.toList())</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>relationName</entityNameKey>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entityName</entityNameKey>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relationName</entityNameKey>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>responseClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>collectors</entityNameKey>
                            <classLayer>Collectors</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
                <codeBlockStatement>
                    <statementBody>this.$L = $T.isNull($L.get$L()) ? null : new $T($L.get$L())</statementBody>
                    <requestArgs>
                        <statementArg>
                            <entityNameKey>relationName</entityNameKey>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>objects</entityNameKey>
                            <classLayer>Objects</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entityName</entityNameKey>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relationName</entityNameKey>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relation</entityNameKey>
                            <classLayer>responseClass</classLayer>
                            <isClazz>true</isClazz>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>entityName</entityNameKey>
                        </statementArg>
                        <statementArg>
                            <entityNameKey>relationName</entityNameKey>
                            <stringOperation>capitalizeField</stringOperation>
                        </statementArg>
                    </requestArgs>
                </codeBlockStatement>
            </codeBlockStatements>
        </helperMethod>
    </helperMethods>
    <dependencies>
        <dependency>
            <packageName>org.springframework.data.domain</packageName>
            <simpleName>Pageable</simpleName>
        </dependency>
        <dependency>
            <packageName>org.springframework.data.domain</packageName>
            <simpleName>Page</simpleName>
        </dependency>
        <dependency>
            <packageName>org.springframework.data.domain</packageName>
            <simpleName>PageImpl</simpleName>
        </dependency>
        <dependency>
            <packageName>com.querydsl.core.types</packageName>
            <simpleName>Predicate</simpleName>
        </dependency>
        <dependency>
            <packageName>java.util.stream</packageName>
            <simpleName>Collectors</simpleName>
        </dependency>
        <dependency>
            <packageName>java.util</packageName>
            <simpleName>Optional</simpleName>
        </dependency>
        <dependency>
            <packageName>java.util</packageName>
            <simpleName>Objects</simpleName>
        </dependency>
        <dependency>
            <packageName>org.springframework.data.jpa.repository</packageName>
            <simpleName>JpaRepository</simpleName>
        </dependency>
        <dependency>
            <packageName>org.springframework.data.querydsl</packageName>
            <simpleName>QuerydslPredicateExecutor</simpleName>
        </dependency>
        <dependency>
            <packageName>org.springframework.data.querydsl.binding</packageName>
            <simpleName>QuerydslBinderCustomizer</simpleName>
        </dependency>
    </dependencies>
</layersConfig>